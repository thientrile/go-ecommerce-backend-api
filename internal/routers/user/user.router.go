package user

import (
	"github.com/gin-gonic/gin"
	"go-ecommerce-backend-api.com/internal/controller/account"
	// "go-ecommerce-backend-api.com/internal/controller/account"
	// 	"go-ecommerce-backend-api.com/internal/controller"
	// 	"go-ecommerce-backend-api.com/internal/repo"
	// 	"go-ecommerce-backend-api.com/internal/service"
)

type UserRouter struct{}

func (pr *UserRouter) InitUserRouter(Router *gin.RouterGroup) {
	// public router
	// this non-dependency
	// ur := repo.NewUserRepository()
	// us := service.NewUserService(ur)
	// useHandlerNoDependency := controller.NewUserController(us)
	// userController, _ := wire.InitUserRouterHandler() // This is generated by wire, it will inject dependencies automatically
	// Wire go

	userRouterPublic := Router.Group("/user")
	{
		// userRouterPublic.POST("/register",useHandlerNoDependency.Regisger) // Register a new user -> Yes ->No
		userRouterPublic.POST("/register", account.Login.Register)                               // Register a new user -> Yes ->No
		userRouterPublic.POST("/login", account.Login.Login)                                     // Register a new user -> Yes ->No
		userRouterPublic.POST("/verify-otp", account.Login.VerifyOTP)                            // Verify OTP for user -> Yes ->No
		userRouterPublic.POST("/update-password-register", account.Login.UpdatePasswordRegister) // Verify OTP for user -> Yes ->No
	}

	// private router
	userRouterPrivate := Router.Group("/user")
	// userRouterPrivate.Use(Limiter()) // Add any necessary middleware here, e.g., authentication
	// userRouterPrivate.Use(Authen()) // Add any necessary middleware here, e.g., authentication
	// userRouterPrivate.Use(Permission()) // Add any necessary middleware here, e.g., authentication
	{
		userRouterPrivate.GET("/get_info")
	}

}
