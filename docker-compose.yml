# version: "3.9"
name: go-ecommerce-backend-api
services:
  # Go Backend Container - chỉ chạy trong production mode
  crm.shopdev.com:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-ecommerce-backend
    environment:
      - ENV=docker
    command: ["/crm.shopdev.com", "configs/local.yaml"]
    volumes:
      - ./configs:/configs
    ports:
      - "8001:8002"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    profiles:
      - prod

  mysql:
    image: mysql:8.0
    container_name: go-ecommerce-mysql
    environment:
      MYSQL_ROOT_PASSWORD: "strongpassword123!"
      MYSQL_DATABASE: "shopDevgo"
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-custom.cnf:/etc/mysql/conf.d/custom.cnf  # cấu hình binlog
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pstrongpassword123!"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.2
    container_name: go-ecommerce-redis
    command: ["redis-server", "--requirepass", "strongredispass"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "strongredispass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: go-ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: go-ecommerce-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://go-ecommerce-kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: go-ecommerce-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - go-ecommerce-network
    restart: unless-stopped
  debezium:
    image: quay.io/debezium/connect:3.1.2.Final
    container_name: go-ecommerce-debezium
    depends_on:
      - kafka
      - mysql
      - zookeeper
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      PLUGIN_PATH: /kafka/connect,/debezium-connector-mysql
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
    networks:
      - go-ecommerce-network
    restart: unless-stopped
  # Nginx for Production - proxy to container
  nginx-prod:
    image: nginx:alpine
    container_name: go-ecommerce-nginx-prod
    depends_on:
      - crm.shopdev.com
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/docker.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - prod

  # Nginx for Development - proxy to host
  nginx-dev:
    image: nginx:alpine
    container_name: go-ecommerce-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - go-ecommerce-network
    restart: unless-stopped    
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - dev
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: go-ecommerce-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3
    # profiles:
    #   - dev
    #   - prod
  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: go-ecommerce-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # profiles:
    #   - dev
    #   - prod
  # # MySQL Exporter - Database Metrics
  # mysql-exporter:
  #   image: prom/mysqld-exporter:latest
  #   container_name: go-ecommerce-mysql-exporter
  #   ports:
  #     - "9104:9104"
  #   volumes:
  #     - ./monitoring/.my.cnf:/root/.my.cnf:ro
  #   environment:
  #     - MYSQLD_EXPORTER_PASSWORD=strongpassword123!
  #   command:
  #     - --config.my-cnf=/root/.my.cnf
  #     - --mysqld.address=mysql:3306
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   networks:
  #     - go-ecommerce-network
  #   restart: unless-stopped
  #   profiles:
  #     - dev
  #     - prod
  # # Redis Exporter - Cache Metrics
  # redis-exporter:
  #   image: oliver006/redis_exporter:latest
  #   container_name: go-ecommerce-redis-exporter
  #   ports:
  #     - "9121:9121"
  #   environment:
  #     - REDIS_ADDR=redis://redis:6379
  #     - REDIS_PASSWORD=strongredispass
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - go-ecommerce-network
  #   restart: unless-stopped
  #   profiles:
  #     - dev
  #     - prod
  # # Node Exporter - System Metrics
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: go-ecommerce-node-exporter
  #   ports:
  #     - "9100:9100"
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   networks:
  #     - go-ecommerce-network
  #   restart: unless-stopped
  #   profiles:
  #     - dev
  #     - prod
  # # Kafka Exporter - Message Queue Metrics
  # kafka-exporter:
  #   image: danielqsj/kafka-exporter:latest
  #   container_name: go-ecommerce-kafka-exporter
  #   ports:
  #     - "9308:9308"
  #   command:
  #     - '--kafka.server=kafka:9092'
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - go-ecommerce-network
  #   restart: unless-stopped
  #   profiles:
  #     - dev
  #     - prod


volumes:
  mysql-data:
  redis_data:
  prometheus-data:
  grafana-data:

networks:
  go-ecommerce-network:
    driver: bridge