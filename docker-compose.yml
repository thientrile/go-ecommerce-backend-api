# version: "3.9"
name: go-ecommerce-backend-api
services:
  crm.shopdev.com:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-ecommerce-backend
    command: ["/crm.shopdev.com", "configs/local.yaml"]
    volumes:
      - ./configs:/configs
    ports:
      - "8001:8002"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - go-ecommerce-network
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: go-ecommerce-mysql
    environment:
      MYSQL_ROOT_PASSWORD: "strongpassword123!"
      MYSQL_DATABASE: "shopDevgo"
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-custom.cnf:/etc/mysql/conf.d/custom.cnf  # cấu hình binlog
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pstrongpassword123!"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.2
    container_name: go-ecommerce-redis
    command: ["redis-server", "--requirepass", "strongredispass"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "strongredispass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: go-ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: go-ecommerce-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://go-ecommerce-kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - go-ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: go-ecommerce-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - go-ecommerce-network
    restart: unless-stopped

  debezium:
    image: quay.io/debezium/connect:3.1.2.Final
    container_name: go-ecommerce-debezium
    depends_on:
      - kafka
      - mysql
      - zookeeper
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      PLUGIN_PATH: /kafka/connect,/debezium-connector-mysql
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
    networks:
      - go-ecommerce-network
    restart: unless-stopped


volumes:
  mysql-data:
  redis_data:

networks:
  go-ecommerce-network:
    driver: bridge
